# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    env:
      BUILD_OUTPUT_DIR: ${{ github.workspace }}/build 

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MinGW compiler toolchain on the default runner image, MSYS Generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang]
        include:
          - os: windows-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: clang


    steps:
    - uses: actions/checkout@v3
    # Add Meson installation steps here
    - name: Install Meson (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y meson

    - name: Install MinGW and Meson (Windows)
      if: matrix.os == 'windows-latest'
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        install: mingw-w64-x86_64-meson mingw-w64-x86_64-libgit2 mingw-w64-x86_64-gcc mingw-w64-x86_64-ninja base-devel git mingw-w64-x86_64-cmake
        upgrade: true


    - name: Configure CMake (Windows)
    # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      if: matrix.os == 'windows-latest'
      run: |
        cmake -B $BUILD_OUTPUT_DIR -G"MSYS Makefiles" -S $BUILD_OUTPUT_DIR/..
      shell: msys2 {0}

    - name: Configure CMake (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: >
        cmake -B $BUILD_OUTPUT_DIR
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}



    - name: Build (Windows)
      if: matrix.os == 'windows-latest'
      shell: msys2 {0}
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build $BUILD_OUTPUT_DIR --config ${{ matrix.build_type }}

    - name: Build (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: cmake --build $BUILD_OUTPUT_DIR --config ${{ matrix.build_type }}

    - name: Test (Ubuntu)
      working-directory: ${{ env.BUILD_OUTPUT_DIR }}
      if: matrix.os == 'ubuntu-latest'
      run: |
        ctest --build-config ${{ matrix.build_type }}  --output-on-failure
        if [ $? -ne 0 ]; then
          cat Testing/Temporary/LastTest.log
          exit 1
        fi

    - name: Test (Windows)
      working-directory: ${{ env.BUILD_OUTPUT_DIR }}
      if: matrix.os == 'windows-latest'
      shell: msys2 {0}
      run: |
        export PATH="$BUILD_OUTPUT_DIR/Criterion/src:$BUILD_OUTPUT_DIR/Criterion/subprojects/nanomsg:$BUILD_OUTPUT_DIR/Criterion/subprojects/nanopb:$BUILD_OUTPUT_DIR/Criterion/subprojects/boxfort/src:$BUILD_OUTPUT_DIR/Criterion/subprojects/libgit2:$PATH"  
        ctest --build-config ${{ matrix.build_type }}  --output-on-failure
        if [ $? -ne 0 ]; then
          cat Testing/Temporary/LastTest.log
          exit 1
        fi